/*
  DESIGN PATTERN
  VIEW PATTERN

  + DESIGN PATTERN CATEGORY

  + GOF의 디자인 패턴 분류
    생성패턴
    구조패턴
    행동패턴

  캡슐화
  다형성
  객체관계
  변화율
  역활모델

  알고리즘이 변화하는 이유?
    비지니스 변화
    연관라이브러리 변화
    호스트측 변화
  대부분 통제불가요소
  
  + 기존 제어문 기반의 알고리즘이 갖는 문제
    "수정하면 전체가 컴파일 됨"
    알고리즘이 변화한 부분만 수정하고 나머지는 건드리고 싶지 않다면?

  최대한 개별 알고리즘을 함수로 분리한다.

  문제1. 경우가 변경 될 때
    경우가 늘어나거나 경우가 변화하는 경우 재배포 해야 한다.
  문제2. 함수 간 공통부분
    common의 변화가 생길경우 문제가 된다.

  우리의 관점은 격리이다.

  + 알고리즘 분화시 객체 지향에서 선택할 수 있는 두가지 방법

  상속 위임 (배우기 쉬움)
    내부 계약관계로 추상층에서 
    공통 요소를 해결하고 
    상태를 공유할 수 있음

  소유 위임
    외부 계약관계로 각각이 
    독립적인문제를 해결하며
    메세지를 주고 받는것으로 
    문제를 해결함

    GOF DP 방향성
    부각적인 형이 많아짐

  protocol

  + 언제가 복잡하고 언제가 심플한가
    짬밥이 쌓여야 가능하다.
    형이 많아진다는건 클래스가 증가한다는 것이다.
  
  + 소유 위임 살펴보기
*/